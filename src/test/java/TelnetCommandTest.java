/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.ArrayList;

import turtle.interfaces.immutable.TelnetCode;
import turtle.connection.telnet.*;

public class TelnetCommandTest {
  @Test
  public void testSingleTelnetCommandConstruction() {
    // we want to know that _any_ telnet command is recognised as a single command other than those
    // that are the start of other, handled commands; this guarantees that we cannot get stuck in
    // parsing an unknown telnet code
    TelnetCode code;
    code = new SingleTelnetCommand(139);
    code = new SingleTelnetCommand(255);
    code = new SingleTelnetCommand(-1);
    code = new SingleTelnetCommand(8);
  }

  @Test
  public void testSingleTelnetCommandReadSuccess() {
    // read from input
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(TelnetCode.IAC);
    list.add(29);
    TelnetCode code = SingleTelnetCommand.readFromArrayList(list);
    // test that it is what we expect
    assertTrue(code != null);
    assertTrue(code.queryCommand() == 29);
    assertTrue(code.queryOption() == 0);
    assertTrue(code.querySubNegotiation() == null);
  }

  @Test
  public void testSingleTelnetCommandReadFailureTooShort() {
    // read from input
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(TelnetCode.IAC);
    TelnetCode code = SingleTelnetCommand.readFromArrayList(list);
    assertTrue(code == null);
  }

  @Test(expected = java.lang.Error.class)
  public void testSingleTelnetCommandReadFailureTooLong() {
    // read from input
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(TelnetCode.IAC);
    list.add(TelnetCode.GA);
    list.add(TelnetCode.SE);
    TelnetCode code = SingleTelnetCommand.readFromArrayList(list);
  }

  @Test
  public void testSingleTelnetCommandReadFailureWrongCommand() {
    // read from input
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(TelnetCode.IAC);
    list.add(TelnetCode.WILL);
    TelnetCode code = SingleTelnetCommand.readFromArrayList(list);
    assertTrue(code == null);
  }

  @Test(expected = java.lang.Error.class)
  public void SupportTelnetCommandConstructionFailure() {
    TelnetCode code = new SupportTelnetCommand(TelnetCode.NOP, 89);
  }

  @Test
  public void SupportTelnetCommandReadSuccess() {
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(TelnetCode.IAC);
    list.add(TelnetCode.DONT);
    list.add(89);
    TelnetCode code = SupportTelnetCommand.readFromArrayList(list);
    assertTrue(code != null);
  }

  @Test
  public void SupportTelnetCommandReadFailureTooShort() {
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(TelnetCode.IAC);
    list.add(TelnetCode.DO);
    TelnetCode code = SupportTelnetCommand.readFromArrayList(list);
    assertTrue(code == null);
  }

  @Test(expected = java.lang.Error.class)
  public void SupportTelnetCommandFailureTooLong() {
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(TelnetCode.IAC);
    list.add(TelnetCode.WONT);
    list.add(89);
    list.add(98);
    TelnetCode code = SupportTelnetCommand.readFromArrayList(list);
    assertTrue(code == null);
  }

  @Test
  public void SupportTelnetCommandReadFailureWrongCommand() {
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(TelnetCode.IAC);
    list.add(TelnetCode.GA);
    list.add(89);
    TelnetCode code = SupportTelnetCommand.readFromArrayList(list);
    assertTrue(code == null);
  }

  @Test
  public void SubNegotiationTelnetCommandConstruction() {
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(0);
    list.add(127);
    list.add(19);
    TelnetCode code = new SubNegotiationTelnetCommand(17, list);
    // was the data copied faithfully?
    int[] arr = code.querySubNegotiation();
    assertTrue(arr.length == 3);
    assertTrue(arr[0] == 0);
    assertTrue(arr[1] == 127);
    assertTrue(arr[2] == 19);
  }

  private ArrayList<Integer> constructGoodList(boolean includeIAC) {
    ArrayList<Integer> list = new ArrayList<Integer>();
    list.add(TelnetCode.IAC);
    list.add(TelnetCode.SB);
    list.add(17);
    list.add(97);
    list.add(200);
    list.add(4);
    list.add(77);
    if (includeIAC) list.add(TelnetCode.IAC);
    list.add(TelnetCode.SE);
    return list;
  }

  @Test
  public void SubNegotiationTelnetCommandReadSuccess() {
    TelnetCode code = SubNegotiationTelnetCommand.readFromArrayList(constructGoodList(true));
    assertTrue(code.queryCommand() == TelnetCode.SB);
    assertTrue(code.queryOption() == 17);
    int[] args = code.querySubNegotiation();
    assertTrue(args.length == 4);
    assertTrue(args[2] == 4);
  }

  @Test
  public void SubNegotiationTelnetCommandReadTolerant() {
    TelnetCode code = SubNegotiationTelnetCommand.readFromArrayList(constructGoodList(false));
    assertTrue(code.queryCommand() == TelnetCode.SB);
    assertTrue(code.queryOption() == 17);
    int[] args = code.querySubNegotiation();
    assertTrue(args.length == 4);
    assertTrue(args[3] == 77);
  }
}

